/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import type { VoteCreateRequest, VoteCreateResponse } from '../../model';
import { customInstance } from '../../mutator/custom-instance';

export const createVote = (voteCreateRequest: VoteCreateRequest) => {
  return customInstance<VoteCreateResponse>({
    url: `/v1/vote`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: voteCreateRequest,
  });
};

export const getCreateVoteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createVote>>,
    TError,
    { data: VoteCreateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createVote>>,
  TError,
  { data: VoteCreateRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createVote>>,
    { data: VoteCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createVote(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateVoteMutationResult = NonNullable<Awaited<ReturnType<typeof createVote>>>;
export type CreateVoteMutationBody = VoteCreateRequest;
export type CreateVoteMutationError = unknown;

export const useCreateVote = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createVote>>,
    TError,
    { data: VoteCreateRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createVote>>,
  TError,
  { data: VoteCreateRequest },
  TContext
> => {
  const mutationOptions = getCreateVoteMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteVote = (voteUid: string) => {
  return customInstance<string>({ url: `/v1/vote/${voteUid}`, method: 'DELETE' });
};

export const getDeleteVoteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteVote>>,
    TError,
    { voteUid: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteVote>>,
  TError,
  { voteUid: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteVote>>,
    { voteUid: string }
  > = (props) => {
    const { voteUid } = props ?? {};

    return deleteVote(voteUid);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteVoteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVote>>>;

export type DeleteVoteMutationError = unknown;

export const useDeleteVote = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteVote>>,
    TError,
    { voteUid: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteVote>>,
  TError,
  { voteUid: string },
  TContext
> => {
  const mutationOptions = getDeleteVoteMutationOptions(options);

  return useMutation(mutationOptions);
};
